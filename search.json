[{"title":"BIND-install&introduction","path":"/2024/11/01/BIND-install-introduction/","content":"BIND-installintroduction根据操作系统选择包管理工具安装 BIND（Berkeley Internet Name Domain） # 使用 Pacman 包管理器安装 BIND（Arch Linux❯ sudo pacman -S bind# 使用 DNF 包管理器安装 BIND（Fedora❯ sudo dnf install bind# 使用 APT 包管理器安装 BIND（Debian/Ubuntu❯ sudo apt-get install bind9 // 版本❯ named -vBIND 9.20.3 (Stable Release) id:1e2850e 本地主机 DNS 服务器 /etc/named.conf 文件是的主要配置文件，用于定义 DNS 服务器的行为和配置 下面是/etc/named.conf默认的内容 // vim:set ts=4 sw=4 et:options directory /var/named; pid-file /run/named/named.pid; // Uncomment these to enable IPv6 connections support // IPv4 will still work: // listen-on-v6 any; ; // Add this for no IPv4: // listen-on none; ; allow-recursion 127.0.0.1; ; allow-transfer none; ; allow-update none; ; version none; hostname none; server-id none;;zone localhost IN type master; file localhost.zone;;zone 0.0.127.in-addr.arpa IN type master; file 127.0.0.zone;;zone 1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.ip6.arpa type master; file localhost.ip6.zone;;//zone example.org IN // type slave;// file example.zone;// masters // 192.168.1.100;// ;// allow-query any; ;// allow-transfer any; ;//;//logging // channel xfer-log // file /var/log/named.log;// print-category yes;// print-severity yes;// severity info;// ;// category xfer-in xfer-log; ;// category xfer-out xfer-log; ;// category notify xfer-log; ;//; /var/named 目录是 BIND（Berkeley Internet Name Domain）服务器的默认工作目录，用于存储 DNS 区域文件和其他相关文件 列出 /var/named 目录，目录默认包含了以下几个文件： 127.0.0.zone：用于 127.0.0.0/8 网段的反向解析区域文件。 localhost.ip6.zone：用于 ::1（IPv6 本地回环地址）的反向解析区域文件。 localhost.zone：用于 localhost 的正向解析区域文件。 managed-keys.bind：用于 DNSSEC 的密钥管理文件。 managed-keys.bind.jnl：managed-keys.bind 的日志文件。 ❯ sudo sh -c cd /var/named ls127.0.0.zone managed-keys.bindlocalhost.ip6.zone managed-keys.bind.jnllocalhost.zone /etc/resolv.conf 文件是用于配置系统 DNS 解析器的配置文件，告诉系统哪些 DNS 服务器应该用于解析域名，该文件一般由网络管理工具（如 NetworkManager 或 systemd-resolved）自动生成 ❯ sudo cat /etc/resolv.conf# Generated by NetworkManagernameserver 192.168.1.1 在 /etc/resolv.conf 文件中，nameserver 指令用于指定 DNS 服务器的 IP 地址。每个 nameserver 行可以指定一个 DNS 服务器的 IP 地址，系统会按照这些地址的顺序进行 DNS 查询 上面输出192.168.1.1表示你本地的一个DNS 服务器 你可以使用先前bind默认配置的文件，直接编辑nameserver行即可，保存更改并退出 nameserver 127.0.0.1 需要注意：如果系统重启或网络重启，那么 NetworkManager 等网络管理工具会覆盖 /etc/resolv.conf 文件 可以将 /etc/resolv.conf 设为不可变（只读）： ❯ sudo chattr +i /etc/resolv.conf 如果要允许可以被覆盖，使用： ❯ sudo chattr -i /etc/resolv.conf 测试 DNS 服务器 使用nslookup命令 ❯ nslookup bilibili.comServer: 127.0.0.1Address: 127.0.0.1#53Non-authoritative answer:Name: bilibili.comAddress: 8.134.50.24Name: bilibili.comAddress: 139.159.241.37Name: bilibili.comAddress: 119.3.70.188Name: bilibili.comAddress: 47.103.24.173 也可以使用dig命令 ❯ dig bilibili.com// 输出太多不粘贴了 使用wireshark检测到流量 其他 启用、启动与查询DNS服务 ❯ sudo systemctl enable named❯ sudo systemctl start named❯ sudo systemctl status named 不使用默认的配置文件，配置自定义的文件，你可能会用到： 检查配置是否存在语法错误（无输出为有效） ❯ sudo named-checkconf /etc/named.conf 检查转发和反向区域文件 ❯ sudo named-checkzone forward.agent /var/named/forward.agent.local❯ sudo named-checkzone reverse.agent /var/named/forward.agent.local P.S. forward.agent 与 reverse.agent 是在etcnamed.conf中自定义的，名称随意 forward.agent.local 与 reverse.agent.local 是你在 varnamed 中定义的文件","tags":["Network","DNS","Software"]},{"title":"Raindrop.io书签管理","path":"/2024/10/23/Raindrop-io书签管理/","content":"Raindrop.io书签管理背景习惯使用浏览器收藏夹，但是书签过多不方便管理，而且有时在linux开发环境下使用firefox与win11环境常用的edge数据不同步。 解决找到了Raindrop.io这个多合一书签管理器，主要看中了跨平台和可以查看到页面内容的功能 安装网页端一般可以从插件市场直接获得，移动端见参考材料链接文档 Install Extension ― Raindrop.io Help 添加到edge 添加到firefox 使用applegmail等方式注册登录 将浏览器收藏夹导出为html文件后导入raindrop.io 设置 其他 raindrop.io是由一个人开发和管理的,Rustem Mussabekov—哈萨克斯坦的设计师开发人员，拥有15年以上的应用程序开发经验 raindrop.io的数据存储在位于德国法兰克福的亚马逊AWS服务器 参考材料好用，免费版功能就很多，详见官方文档 https://help.raindrop.io/","tags":["App","Tool"]},{"title":"RTL8188GU+Archlinux","path":"/2024/09/14/RTL8188GU-Archlinux/","content":"RTL8188GU+Archlinux网卡信息：COMFAST AX3000免驱USB无线网卡 解决问题：win11使用正常；Archlinux无法正常识别使用网卡，需自行配置驱动 准备驱动 # 插入网卡，终端输入，得到网卡芯片信息❯ lsusb# 找到输出如下，确定芯片型号为RTL8188GUBus 003 Device 007: ID 0bda:1a2b Realtek Semiconductor Corp. RTL8188GU 802.11n WLAN Adapter (Driver CDROM Mode# 发现模式（Driver CDROM Mode）不对，被识别为cdrom，所以尝试使用usb_modeswitch命令切换模式❯ yay -S usb_modeswitch # aur可下载❯ sudo usb_modeswitch -KW -v 0bda -p 1a2b # 切换为wifi模式# 被识别为cdrom，也可以尝试卸载❯ eject /dev/cdrom# 安装相应的内核头文件❯ sudo pacman -S linux-headers# 安装base-devel软件包❯ sudo pacman -S base-devel# 安装驱动（对于archlinux，有[aur包](https://aur.archlinux.org/packages/rtl8xxxu-dkms-git#:~:text=I%20recently%20had%20problems%20getting%20my%20RTL8188GU%20wireless)❯ yay -S rtl8xxxu-dkms-git 模块配置 # 列出连接的usb设备❯ lsmod # 输出识别到对应usb网卡（无线标准：IEEE802.11ax）Bus 003 Device 006: ID 0bda:c832 Realtek Semiconductor Corp. 802.11ax WLAN Adapter❯ lspci | grep Network # 输出识别到原集成网卡（这里是Intel的）0000:00:14.3 Network controller: Intel Corporation Alder Lake-P PCH CNVi WiFi (rev 01)# 查看默认网关所在接口，列出路由表❯ ip route # 输出可得wlo1是默认网关所在接口❯ default via 192.168.1.1 dev wlo1# 查看wlo1接口对应的硬件信息❯ ls -l /sys/class/net/wlo1/device/driver/module # 输出有iwlwifi是intel相关的网卡相关的信息，说明用的不是Realtek网卡❯ lrwxrwxrwx 1 root root 0 9月10日 14:59 /sys/class/net/wlo1/device/driver/module - ../../../../module/iwlwifi# 运行下面命令发现无输出，模块未被正确加载❯ lsmod | grep rtl8xxxu# 查看内核模块配置文件❯ ls /etc/modprobe.d# 输出有 blacklist-rtl8xxxu.conf 与 rtl8xxxu_git.conf 两个文件❯ cat /etc/modprobe.d/blacklist-rtl8xxxu.confblacklist rtl8xxxu# 输出blacklist rtl8xxxu，即被添加到黑名单，需修改# 需要将文件代码注释掉或者删掉❯ cat /etc/modprobe.d/rtl8xxxu_git.conf # 内核加载参数不用修改options rtl8xxxu_git ht40_2g=1 # ht40_2g=1参数启用了2.4GHz频段下的HT40模式# 将原来的intel网卡添加到黑名单防止冲突❯ sudo sh -c echo blacklist iwlwifi /etc/modprobe.d/blacklist-iwlwifi.conf 加载检查 # 切换模式后可能需要重新加载rtl8xxxu驱动来确保设备能够被正确识别# 实在不行也可以重启电脑再运行加载❯ sudo modprobe -r rtl8xxxu❯ sudo modprobe rtl8xxxu# 再次运行检测模块是否被加载❯ lsmod | grep rtl8xxxurtl8xxxu 339968 0mac80211 1708032 1 rtl8xxxucfg80211 1409024 2 mac80211,rtl8xxxu# 输出来看 rtl8xxxu 模块已经被加载，并且依赖于 mac80211 和 cfg80211 模块# 检查网络连接ifconfig # 没有ifconfigsudo pacman -S net-tools 注意： 如果usb wifi 适配器基于 RTL8188GU 或 RTL8192FU 芯片，需要先使用命令 usb_modeswitch 或 eject 将其切换到“Wifi 模式”。 在安装此软件包之前，请确保您的系统已安装相应的内核头文件和 base-devel 软件包。 必须手动将安装的驱动程序列入黑名单或删除除内核内 rtl8xxxu 驱动程序之外的任何冲突驱动程序。 参考https://melonedo.github.io/2024/05/13/RTL8188GU.html","tags":["Network","ArchLinux","Hardware"]},{"title":"Superset使用&二次开发","path":"/2024/08/26/Superset使用-二次开发/","content":"使用以官方文档为主，各种配置说明比较详细： 创建您的第一个仪表板 |超集 — Creating Your First Dashboard | Superset (apache.org) 二次开发采用iframe将superset前端内嵌到自己的项目中 基于上一篇的环境配置但是pypi安装使用的是已经编译过的前端没有可编译的superset-frontend目录 前后端使用gh提供的源代码，后端与pypi代码一致，前端另外部署，前后端分离编译，详见配置开发环境,这里后端使用的是Flask server，配置有部分不同 # 首先python虚拟环境必须使用python3.9，3.10，3.11的版本sudo apt install python3.9 # os安装需要的python版本virtualenv superset-dev -python=pythonx.x.x # 生成环境source superset-dev/bin/activate # 激活环境git clone # 从需要从github上拉源码cd ./superset # 进入目录pip install -r requirements/development.txt # 安装外部依赖pip install -e . # 安装开发模组# 后面的初始化同PYPI部署一样superset db upgradesuperset fab create-adminsuperset initsuperset load-examplessuperset run -p 8088 --with-threads --reload --debugger --debug # debug模式 前端用npm i即可，有些包可能需要手动下载 如果需求不止步于iframe，则需要针对源代码大量修改，官方文档相关内容较少 一、VMware网络配置（虚拟机设置网络适配器网络连接） 虚拟机如需连接主机代理需要自定义，也可以在虚拟机上配置 可以网上检索“VMware虚拟机共享主机代理”相关内容 选择桥接模式 虚拟机终端下输入 ifconfig 可以看到这里内网的IP地址是192.168.188.97(不同局域网后两位不一样) 如果只有下面一段输出，可能是没连上网(确保主机联网)，也可能是ubuntu网络服务掉了(解决见下) 先检查varlibNetworkManagerNetworkManager.state （NetworkManager是一些Linux的默认网络管理器） sudo cat /var/lib/NetworkManager/NetworkManager.state# 输出[main]NetworkingEnabled=falseWirelessEnabled=trueWWANEnabled=true 文件中输出中显示状态NetworkingEnabledfalse，所以服务是关闭状态 # 关闭服务service NetworkManager stop# 删除状态文件sudo rm /var/lib/NetworkManager/NetworkManager.state# 重启服务service NetworkManager start 一般到这步就好了 可以再修改以下配置文件etcNetworkManagerNetworkManager.conf sudo vim /etc/NetworkManager/NetworkManager.conf修改文件中的managed=true 一些debian版本NetworkManager 默认不管理任何定义的 etcnetworkinterfaces 接口 未受管理的设备意味着 NetworkManager 不处理这些网络设备 etcNetworkManagerNetworkManager.conf中的[ifupdown]设置managedtrue后，NetworkManager 会尝试管理 /etc/network/interfaces 中定义的接口 修改完后保存，输入 sudo systemctl restart systemd-networkd.service 重启网络服务就好了 二、superset部分配置项修改 配置超集 |超集 — Configuring Superset | Superset (apache.org) 已经在虚拟机中获得内网IP，需要略微修改运行superset的命令 # 如果先前的环境变量都配置了的话# 以后重启虚拟机启用superset服务只需要进入虚拟环境source superset/bin/activatesuperset run -h 192.168.188.97 -p 8088 --with-threads --reload --debugger 就可以在虚拟机外部同局域网的主机下用浏览器访问192.168.188.97:8088的服务了 二次开发superset通过iframe嵌入是最方便的 !DOCTYPE htmlhtml lang=enhead meta charset=UTF-8 meta name=viewport content=width=device-width, initial-scale=1.0 titledashboard/title/headbody div class-dashboard iframe width=1600 height=800 seamless frameBorder=0 scrolling=no src=http://192.168.188.97:8088/ /iframe /div/body/html 用浏览器打开html就可以直接访问到嵌套在iframe里面的superset，但是可以会出现跨域等问题，所以需要进行一些配置 superset 通过其 config.py 模块公开了数百个可配置参数进入supersetlibpythonx.xsite-packagessupersetconfig.py 语言配置 BABEL_DAFAULT_LOCALE = zh # 改中文,下面有一个LANGUAGES的字典可以根据需要修改 如果希望在不用登录的状态下就能访问仪表板数据看板 角色权限管理 superset将分了几种默认角色权限 Admin管理员：默认所有权限 Public公共（未登陆）：默认无权限 Alpha：能访问修改数据源 Gamma：能访问修改仪表盘和图表 granter：能修改角色权限 sql_lab：能访问SQL Lab 可以在管理员用户的Settings设置List Roles 列出角色中修改，也可以通过config.py进行一些配置 逐项为public角色添加权限相当麻烦，所以修改config.p以下配置 PUBLIC_ROLE_LIKE: Optional[str] = None# 改成PUBLIC_ROLE_LIKE: Optional[str] = Gamma # 使public和Gamma权限一致# 有些版本可能是PUBLIC_ROLE_LIKE_GAMMA = True 当然一般可以给public添加一个数据源的权限 all database access on all_database_access 去掉X-Frame-Options限制 配置调用的优先级是先OVERRIDE_HTTP_HEADERS再DEFAULT_HTTP_HEADERS最后HTTP_HEADERS，反正三项置空就行 DEFAULT_HTTP_HEADERS: dict[str, Any] = OVERRIDE_HTTP_HEADERS: dict[str, Any] = HTTP_HEADERS: dict[str, Any] = CSRF 保护设置 默认情况下，WTF_CSRF_ENABLED 为 True 设为False禁用所有视图中的 CSRF 保护 WTF_CSRF_ENABLED = False TALISMAN_ENABLED和TALISMAN_DEV_CONFIG的配置 经过前面的配置一般来说iframe中可以显示superset，但是登录后遇到重定向问题，依旧回到原页面（未登录状态） F12发现“X-Frame-Options”为“SAMEORIGIN” github看到类似问题可能有助于解决 TALISMAN_ENABLED = TrueTALISMAN_DEV_CONFIG = ...frame_options: ALLOWALL,frame_options_allow_from: *, 接着，如果superset服务与自己的应用服务在同一个域名下iframe中就可以正常登录 假如自己的应用服务和superset服务不在同一个域名下，需要以下配置： 在superset_config.py中添加 SESSION_COOKIE_SAMESITE = None 确保将 Firefox 设置为不阻止跨站点 cookie（不建议这样做，但它会制作嵌入式图表）。 因此，从 /superset/welcome 重定向到 /login/ 意味着 superset 无法从 cookie 中找到您的会话（您的浏览器可能会阻止第 3 方 cookie，因为 superset 作为第 3 方提供） 如果您通过 HTTP 而不是 HTTPS 提供超集，则还需要在 superset_config.py中使用 SESSION_COOKIE_SECURE = False，尽管不建议仅使用 http。 注意：此解决方案适用于 Firefox 和 ChromeChromium，但不适用于 Safari。 详见python - Superset iframe login redirect - Stack Overflow 其他 1） APP_NAME = Superset # 可更改标签页名称APP_ICON = xxx.png # 可修改界面左上角图标LOGO_TARGET_PATH = None # 可修改图标点击后的跳转页面 2） 浏览器进入192.168.xxx.xxx:8088地址默认会重定向到supersetwelcome页面 这个页面是supersettemplatessupersetpublic_welcome.html templates里面内容是Flask生成的，html也是经过打包的 在supersetinitializationinit.py文件中有代码，就是用来重定向的 class SupersetIndexView(IndexView): @expose(/) def index(self) - FlaskResponse: return redirect(/superset/welcome/) 例如可以将代码中”supersetwelcome”改成”dashboardlist”就会重定向到仪表盘页面了 3） JWT用户登陆验证，还没搞 教程 —— 如何在自己的应用集成superset - JadePeng - 博客园 https://github.com/ygoleite/superset-jwt-login 4） 遇到的一个数据库问题（无法获取数据库：解密密钥无效），通过下面连接方法解决 https://github.com/apache/superset/issues/25261 解决方案是在将文件 homeYOUR_USERsuperset-envlibpythonX.X.Xsite-packagessqlalchemy_utilstypesencryptedencrypted_type.py 中找到的每个 utf-8 字符串更改为 latin-1 后，使用superset re-encrypt-secrets","tags":["Apache","DS","Python"]},{"title":"Superset概述&本地部署","path":"/2024/08/07/Superset概述-本地部署/","content":"Superset Welcome | Superset (apache.org)https://github.com/apache/superset — 简介 — Superset 是一个数据可视化和数据探索平台（数据可视化工具） Superset 可以取代或增强许多团队的专有商业智能工具 Superset 与各种数据源很好地集成。 Superset 提供： A no-code interface for building charts quickly 用于快速构建图表的无代码界面 A powerful, web-based SQL Editor for advanced querying 一个强大的、基于 Web 的 SQL 编辑器，用于高级查询 A lightweight semantic layer for quickly defining custom dimensions and metrics 一个轻量级语义层，用于快速定义自定义维度和指标 Out of the box support for nearly any SQL database or data engine 开箱即用，支持几乎所有 SQL 数据库或数据引擎 A wide array of beautiful visualizations to showcase your data, ranging from simple bar charts to geospatial visualizations 各种精美的可视化效果来展示您的数据，范围从简单的条形图到地理空间可视化效果 Lightweight, configurable caching layer to help ease database load 轻量级、可配置的缓存层，有助于减轻数据库负载 Highly extensible security roles and authentication options 高度可扩展的安全角色和身份验证选项 An API for programmatic customization 用于编程定制的 API A cloud-native architecture designed from the ground up for scale 从头开始设计的云原生架构，旨在实现规模化 — 部署 — 建筑 |超集 — Architecture | Superset (apache.org) 官网提供多种安装方式：Kubernetes、PyPI、Docker Compose、Docker等 1. Docker 部署https://superset.apache.org/docs/installation/docker-builds apachesuperset - Docker Image | Docker Hub 默认运行地址 http://localhost:8088 默认账号密码：admin 2. Docker Compose 部署注意： 在 Quickstart 中官方建议使用 Docker Compose 方式，仅使用的话这样部署即可更便捷，但该构建方式不被建议在生产环境中 OS环境依赖： 可参考：使用Docker Compose安装本地安装 | Superset (zhaoweilong.github.io) 要注意 superset 不直接支持 Windows 操作系统，需要使用虚拟机或 WSL + Docker Desktop win11+docker compose部署尝试 # 从官网克隆仓库到本地，进入目录git clone --depth=1 https://github.com/apache/superset.gitcd superset# 有几种选项，详见官方文档，这里使用交互式开发环境的方式# 接着就会部署，如果win缺少环境会装wsl和docker desktopdocker compose up Docker Desktop官方安装https://docs.docker.com/desktop/install/windows-install/ docker desktop修改默认安装路径（管理存储空间），可见基于windows WSL安装Docker Desktop，修改默认安装到C盘及默认下载镜像到C盘-腾讯云开发者社区-腾讯云 (tencent.com) 3. PyPI 部署apache-superset:2.1详细部署流程目的 项目需求，用于生产的数据分析平台，使用PyPI部署 测试与简单调用可移步docker部署 环境 VMware® Workstation 16 Pro ubuntu-20.04.6-desktop-amd64 具体步骤OS环境配置 下载 iso 文件（Index of ubuntu-releases | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror） 我这里下的是**ubuntu-releases20.04.6**ubuntu-20.04.6-desktop-amd64.iso 打开VMware，点击文件新建虚拟机 类型选择典型（推荐），下一步 选择安装程序光盘映像文件，找到刚才下载的iso文件，下一步 填写信息（用户名与登录密码等），下一步 填写信息（虚拟机名称和安装位置），下一步 磁盘分 20G（仅作项目环境调试不长期使用），存储为单个文件（确保性能但影响不大），下一步 完成 选择刚创建的虚拟机，开启 等待，鼠标移动至窗口可操作，按 CTRL+ALT 快捷键回到主机，输入用户名密码，登入系统 Superset环境配置 进入系统，全都关掉SkipNextDone等弹窗，左上角火狐浏览器，搜索Superset，没连接代理可以用bing，一般是搜索结果第一个，进入官网（欢迎 |超集 — Welcome | Superset (apache.org)）， Get Started 点击左侧栏 InstallationPyPI，右侧找到 ubuntu20.04 对应的操作系统依赖项下载命令复制 在 Ubuntu 20.04 中，以下命令将确保安装所需的依赖项： sudo apt-get install build-essential libssl-dev libffi-dev python3-dev python3-pip libsasl2-dev libldap2-dev default-libmysqlclient-dev 粘贴到终端，在终端窗口使用快捷键 CTRL+SHIFT+V，粘贴命令回车运行，结果如下图 安装python的虚拟环境venv pip install virtualenv 结束出现了一个WARNING，告诉我们需要添加环境变量$PATH（可以使用 echo $PATH命令查看当前环境变量） 可以使用 sudo vi etcprofile 进入配置文件进行编辑，在文件末尾写入 export PATH=$PATH:/home/用户名/.local/bin/ （如果vi麻烦就自行下载使用其他编辑器vim nano vsc……，注意保存编辑内容） 输入source etcprofile载入修改后的配置文件 source /etc/profile 输入virtualenv —version查看到命令已经存在 virtualenv --version 使用 virtualenv superset创建名为superset的python虚拟环境，并使用source命令激活环境 virtualenv supersetsource superset/bin/activate 不喜欢virtualenv也可以使用其他方式构建虚拟环境，也可参考文档 Superset下载安装与初始化 在刚刚创建的虚拟环境内，输入pip install apache-superset命令正式下载superset，等待结束 pip install apache-superset 结束后，输入superset db upgrade命令进行初始化 superset db upgrade 发现报错 检查发现superset2.x版本不再受支持 Superset 2.x： ‘AttributeError： 模块’flask.json’没有属性’JSONEncoder’’ ·apache超集 ·讨论 #27211 — Superset 2.x: AttributeError: module flask.json has no attribute JSONEncoder · apachesuperset · Discussion #27211 (github.com) 如果更换版本成本太大，尝试了pip python和superset的升级也有一些问题 还是先根据提示先升级pip pip install —upgrade pip 再次运行superset db upgrade命令可能会出现 TypeError: init() got an unexpected keyword argument ‘unbound_message’是apache-superset 2.1的bug，需要降级flask，使用下面的命令： python -m pip uninstall -y Flaskpython -m pip install Flask==2.0.3 发现在终端输入superset是有输出的，但是需要设置一个FLASK_APP的环境变量 终端输入export FLASK_APPsuperset # 关闭终端就没有了后面添加到/etc/profileexport FLASK_APP=superset 再次运行superset db upgrade superset db upgrade 看文档还要进行初始化配置 翻译：注意，对于Superset的生产实例，有些配置是强制性的。特别地，如果没有用户指定的SECRET_KEY值，Superset将不会启动。请参考配置Superset 上面爆不安全的SECRET_KEY也是之前找问题输入了一句export SUPERSET_SECRET_KEY“123456” 而找到~supersetlibpytohn3.8site-packagessuperset目录下的config.py配置文件可以发现，配置里就是SECRET_KEY调环境变量的SUPERSET_SECRET_KEY 文档里面的注释建议用openssl rand -base64 42那就在终端中用该命令生成一个随机密钥再赋值给SUPERSET_SECRET_KEY SUPERSET_SECRET_KEY=$(openssl rand -base64 42)echo $SUPERSET_SECRET_KEY# 将刚刚生成的密钥具体值添加到/etc/profileexport SUPERSET_SECRET_KEY=ACB7Zwwns6bG2…… 执行superset db upgrade命令,遇到模块缺失问题就pip install安装，或者重装 # 这里装了一个marshmallow_enumpip install marshmallow_enum 最后在执行superset db upgrade命令，成功 接着根据官网文档依次执行后面的命令 export FLASK_APP=superset #上面应该执行过了# 创建管理员用户，不输入默认就是[ ]中的内容，密码输入不可见superset fab create-admin # 输错了CTRL+C中断重新执行该命令# 下载一些样例数据，应该是要开代理连接的superset load_examples# 创建默认角色和权限superset init# 在端口 8088 上启动 Web 服务器，使用 -p 绑定端口superset run -p 8088 --with-threads --reload --debugger 如果一切正常，打开浏览器，网址栏进入8088端口就能见到界面了，输入之前创建的管理员用户[admin]和密码 localhost:8088 成功进入（因为没改代理跳过了superset load_examples一步所以主菜单没显示样例数据） 到此，apache-superset:2.1 PyPI 部署完成 — 参考材料 — 建筑 |超集 — Architecture | Superset (apache.org) 57K star！开源BI神器，比收费软件还好用的数据可视化工具 - 掘金 superset不同版本安装使用采坑总结（持续更新中）_superset3.1.1改动-CSDN博客","tags":["Apache","DS","Python"]},{"title":"cs-learning","path":"/2024/08/06/cs-learning/","content":"Websites of Computer-Science-related Learning CS自学指南 来自北大信科的一本计算机的自学指南 可以查找众多计科课程平替进行学习，建议所有初学者学习UCB CS61系列课程 https://csdiy.wiki/ Coursera Coursera 是由两位斯坦福大学计算机科学教授创立的在线学习平台,与 200 多所世界领先的大学和公司合作提供数千门在线课程 人工智能与数据科学领域的课程为主 https://www.coursera.org/ Deeplearning.AI DeepLearning.AI 社区致力于提供 AI 行业最具教育意义的资源 补充Coursera的资源 https://community.deeplearning.ai/ edX edX is the online learning destination co-founded by Harvard and MIT https://home.edx.org/ MIT MIT OpenCourseWare 是一个在线出版物，包含来自 2,500 多门 MIT 课程的材料，与世界各地的学习者和教育工作者免费分享知识 https://ocw.mit.edu/ LinkedIn LinkedIn学习：在线培训课程和技能建设 https://www.linkedin.com/learning/ Stanford Stanford Engineering Everywhere （SEE） 免费为学生和教育工作者提供 Stanford 体验 https://see.stanford.edu/ SurviveSJTUManual 上海交通大学生存手册 虽然不是关于计算机学习的，但是非常值得高校学生阅读 https://survivesjtu.gitbook.io/survivesjtumanual DezemingFamily DezemingFamily是公益性质的知识学习和交流网站，所有电子书和小册子均可免费下载 https://dezeming.top/ jyywiki Yanyan's Wiki 是南京大学计算机软件研究所的 Yanyan 的个人网站 http://jyywiki.cn/ HDU-CS-WIKI 来自杭电的计算机科学讲义 https://hdu-cs.wiki","tags":["CS"]},{"title":"Hello World","path":"/2024/07/29/hello-world/","content":"for test","tags":["ZA"]},{"title":"Across the sky, Stars shimmers alike","path":"/links/index.html","content":"moying688x0r"},{"title":"这里是时间线记录","path":"/timeline/index.html","content":"2025 年 1 月 21 日改用stellar主题有很多笔记想整理成文，一直没时间，希望接下来能坚持2024 年 6 月 15 日 至 2024 年 12 月 26 日陆续上传了一些文章内容，但质量不高，要再删改2024 年 11 月 26 日使用域名krisnile.site2024 年 6 月 15 日开启个人博客，使用hexo驱动，flexblock主题"}]